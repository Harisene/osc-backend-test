directive @auth on FIELD_DEFINITION
directive @role(roles: [String!]!) on FIELD_DEFINITION

input AddCourseInput {
  title: String!
  description: String!
  duration: String!
  outcome: String!
  collectionId: String!
  authorId: String!
}

input updateCourseInput {
  title: String
  description: String
  duration: String
  outcome: String
}

type UserToken {
  id: String
  token: String
}

type Collection {
  id: String
  name: String
  createdAt: String
  updatedAt: String
}

type Course {
  title: String
  description: String
  duration: String
  outcome: String
}

type CollectionWithCourses {
  id: String
  name: String
  createdAt: String
  updatedAt: String
  courses: [Course]
}

enum CourseSortOrder {
  ASC
  DESC
}

enum UserRole {
  STUDENT
  AUTHOR
  ADMIN
}

type Query {
  login(username: String!, password: String!): UserToken
  getCollections: [Collection]
  getCollection(id: ID!): CollectionWithCourses
  getCourse(id: ID!): Course
  getCourses(limit: Int, sortOrder: CourseSortOrder): [Course]
}

type Mutation {
  register(username: String!, password: String!, role: UserRole): UserToken
  addCollection(name: String!): ID @auth @role(roles: ["ADMIN"])
  addCourse(courseData: AddCourseInput): ID
    @auth
    @role(roles: ["ADMIN", "AUTHOR"])
  updateCourse(id: ID!, courseData: updateCourseInput): ID
    @auth
    @role(roles: ["ADMIN", "AUTHOR"])
  deleteCourse(id: ID!): ID @auth @role(roles: ["ADMIN", "AUTHOR"])
  updateUser(id: ID!, role: UserRole!): ID @auth @role(roles: ["ADMIN"])
}
